{"version":3,"sources":["useApi.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useApi","useState","data","setData","getData","a","axios","get","response","quote","console","log","error","useEffect","refreshData","charToNote","char","notes","note","charCodeAt","length","App","toneInitialized","setToneInitialized","synth","Tone","toDestination","play","stop","notesArray","split","map","j","time","toBarsBeatsSixteenths","filter","x","JSON","stringify","value","triggerAttackRelease","start","bpm","cancel","onClick","fakeData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wx4IA0BeA,MAvBf,WAAmB,IAAD,EACQC,qBADR,mBACTC,EADS,KACHC,EADG,KAEVC,EAAO,uCAAG,4BAAAC,EAAA,+EAEWC,IAAMC,IAE3B,2BAJU,OAENC,EAFM,OAMZL,EAAQK,EAASN,KAAKO,OACtBC,QAAQC,IAAI,eAAgBH,EAASN,KAAKO,OAP9B,gDASZC,QAAQE,MAAR,MATY,yDAAH,qDAkBb,OAHAC,qBAAU,WACRT,MACC,IACI,CAAEF,OAAMY,YANK,WAClBV,O,eCbJ,SAASW,EAAWC,GAClB,IAAMC,EAAQ,CACZ,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,OAEIC,EAAOD,EAAMD,EAAKG,WAAW,GAAKF,EAAMG,QAE9C,OADAV,QAAQC,IAAIO,GACLA,EAgEMG,MAhDf,WAAgB,IAAD,EACiBrB,IAAtBE,EADK,EACLA,KAAMY,EADD,EACCA,YADD,EAEiCb,oBAAS,GAF1C,mBAENqB,EAFM,KAEWC,EAFX,KAGPC,GAAQ,IAAIC,KAAaC,gBAEzBC,EAAI,uCAAG,4BAAAtB,EAAA,yDACNiB,EADM,gCAEHG,MAFG,OAGTf,QAAQC,IAAI,kBACZY,GAAmB,GAJV,OAMXK,IACMC,EAA6B3B,EAxBlC4B,MAAM,IACNC,KAAI,SAACf,EAAMgB,GACV,IAAMC,EAAI,UAAMR,IAAUO,EAAI,GAAGE,yBACjC,MAAa,MAATlB,EAAqB,KACZ,MAATA,EAAqB,CAACiB,EAAM,MACpB,CAACA,EAAMlB,EAAWC,OAG/BmB,QAAO,SAACC,GAAD,QAASA,KAiBjB1B,QAAQC,IAAI0B,KAAKC,UAAUT,IAE3B,IAAIJ,KAAU,SAAUQ,EAAMM,GAC5Bf,EAAMgB,qBAAqBD,EAAO,MAAON,KACxCJ,GAAYY,MAAM,GAErBhB,IAAeiB,IAAIH,MAAQ,IAC3Bd,IAAegB,QAfJ,4CAAH,qDAkBJb,EAAI,uCAAG,sBAAAvB,EAAA,sDACXoB,IAAeG,OACfH,IAAekB,SAFJ,2CAAH,qDAWV,OACE,gCACE,gCACE,wBAAQC,QAASjB,EAAjB,yBACA,wBAAQiB,QAAShB,EAAjB,2BAEF,gCACE,wBAAQgB,QAbd,WACE9B,IACAc,IACAD,KAUI,0BACCU,KAAKC,UAAL,OAAepC,QAAf,IAAeA,IAAQ2C,UClEjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.697f72b6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction useApi() {\n  const [data, setData] = useState<any>();\n  const getData = async () => {\n    try {\n      const response = await axios.get(\n        // \"https://cors-anywhere.herokuapp.com/https://covid-api.mmediagroup.fr/v1/cases\"\n        \"https://api.kanye.rest/\"\n      );\n      setData(response.data.quote);\n      console.log(\"Api response\", response.data.quote);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const refreshData = () => {\n    getData();\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return { data, refreshData };\n}\n\nexport default useApi;\n","import React, { useState } from \"react\";\nimport useApi from \"./useApi\";\nimport * as Tone from \"tone\";\nimport fakeData from \"./fakeApi.json\";\n\nfunction charToNote(char: string) {\n  const notes = [\n    \"A4\",\n    \"Bb4\",\n    \"B4\",\n    \"C4\",\n    \"Db4\",\n    \"D4\",\n    \"Eb4\",\n    \"E4\",\n    \"F4\",\n    \"Gb4\",\n    \"G4\",\n    \"Ab4\",\n  ];\n  const note = notes[char.charCodeAt(0) % notes.length];\n  console.log(note);\n  return note;\n}\nfunction sentenceToNotes(sentence: string) {\n  const words = sentence\n    .split(\"\")\n    .map((char, j) => {\n      const time = `${Tone.Time(j / 4).toBarsBeatsSixteenths()}`;\n      if (char === \" \") return null;\n      if (char === \".\") return [time, \"C0\"];\n      const arr = [time, charToNote(char)];\n      return arr;\n    })\n    .filter((x) => !!x);\n\n  return words;\n}\nfunction App() {\n  const { data, refreshData } = useApi();\n  const [toneInitialized, setToneInitialized] = useState(false);\n  const synth = new Tone.Synth().toDestination();\n\n  const play = async () => {\n    if (!toneInitialized) {\n      await Tone.start();\n      console.log(\"audio is ready\");\n      setToneInitialized(true);\n    }\n    stop();\n    const notesArray = sentenceToNotes(data);\n    console.log(JSON.stringify(notesArray));\n\n    new Tone.Part(function (time, value) {\n      synth.triggerAttackRelease(value, \"16n\", time);\n    }, notesArray).start(0);\n\n    Tone.Transport.bpm.value = 128;\n    Tone.Transport.start();\n  };\n\n  const stop = async () => {\n    Tone.Transport.stop();\n    Tone.Transport.cancel();\n  };\n\n  function handleRefreshData() {\n    refreshData();\n    stop();\n    play();\n  }\n\n  return (\n    <div>\n      <div>\n        <button onClick={play}>Start Sound</button>\n        <button onClick={stop}>Stop Sound</button>\n      </div>\n      <div>\n        <button onClick={handleRefreshData}>Get New Data</button>\n        {JSON.stringify(data ?? fakeData)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}