{"version":3,"sources":["useApi.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useApi","useState","data","setData","getData","a","axios","get","response","quote","console","log","error","useEffect","refreshData","App","Speech","speech","setSpeech","speaking","setSpeaking","speechPaused","setSpeechPaused","text","speak","queue","listeners","onend","err","pause","resume","cancel","init","volume","lang","rate","pitch","splitSentences","Tone","toDestination","initSpeak","sentence","setSentence","rows","cols","onChange","e","preventDefault","censored","filter","RegExp","join","replace","match","repeat","length","censorText","target","value","name","onClick","pauseText","resumeText","speakText","cancelSpeak","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA0BeA,MAvBf,WAAmB,IAAD,EACQC,qBADR,mBACTC,EADS,KACHC,EADG,KAEVC,EAAO,uCAAG,4BAAAC,EAAA,+EAEWC,IAAMC,IAE3B,2BAJU,OAENC,EAFM,OAMZL,EAAQK,EAASN,KAAKO,OACtBC,QAAQC,IAAI,eAAgBH,EAASN,KAAKO,OAP9B,gDASZC,QAAQE,MAAR,MATY,yDAAH,qDAkBb,OAHAC,qBAAU,WACRT,MACC,IACI,CAAEF,OAAMY,YANK,WAClBV,O,wBC+OWW,MApLf,WAAgB,IAAD,EACed,mBAAS,IAAIe,KAD5B,mBACNC,EADM,KACEC,EADF,OAEmBjB,oBAAS,GAF5B,mBAENkB,EAFM,KAEIC,EAFJ,OAG2BnB,oBAAS,GAHpC,mBAGNoB,EAHM,KAGQC,EAHR,OAIiBtB,IAJjB,KAILE,KAJK,EAICY,YACgCb,oBAAS,IAL1C,+DAQb,WAAyBsB,GAAzB,SAAAlB,EAAA,sDACE,IACEe,GAAY,GACZH,EAAOO,MAAM,CACXD,OACAE,OAAO,EACPC,UAAW,CACTC,MAAO,WACLP,GAAY,GACZE,GAAgB,OAItB,MAAOM,GACPlB,QAAQE,MAAMgB,GACdR,GAAY,GACZE,GAAgB,GAhBpB,4CARa,kEA4Bb,sBAAAjB,EAAA,+EAEUY,EAAOY,QAFjB,OAGIP,GAAgB,GAHpB,+CAKIZ,QAAQE,MAAR,MALJ,yDA5Ba,kEAqCb,sBAAAP,EAAA,+EAEUY,EAAOa,SAFjB,OAGIR,GAAgB,GAHpB,+CAKIZ,QAAQE,MAAR,MALJ,yDArCa,kEA8Cb,sBAAAP,EAAA,+EAEUY,EAAOc,SAFjB,OAGIX,GAAY,GAHhB,+CAKIV,QAAQE,MAAR,MALJ,yDA9Ca,kEAuDb,4BAAAP,EAAA,sEAESY,GACHC,EAAU,IAAIF,KAHpB,SAKuBC,EAAOe,KAAK,CAC7BC,OAAQ,EACRC,KAAM,QACNC,KAAM,EACNC,MAAO,EACPC,gBAAgB,IAVtB,OAKUnC,EALV,OAaIQ,QAAQC,IAAI,wCAAyCT,GAbzD,gDAeIQ,QAAQE,MAAR,MAfJ,0DAvDa,iCAMC,IAAI0B,KAAaC,gBAmE/B1B,qBAAU,YAzEG,mCA0EX2B,KACC,IA3EU,MAkHmBvC,mBAC9B,oqBAnHW,mBAkHNwC,EAlHM,KAkHIC,EAlHJ,KA+Ib,OACE,8BASE,gCACE,+BACE,0BACEC,KAAM,GACNC,KAAM,GACNC,SAxCgB,SAACC,GACzBA,EAAEC,iBACF,IAAMC,EAzBR,SAAoBzB,GAClB,IAGM0B,EAAS,IAAIC,OAAJ,cAFA,CAAC,2BAAQ,MAAO,SAAU,SAAU,UAEXC,KAAK,KAA9B,QAA0C,MAEzD,OAAO5B,EAAK6B,QAAQH,GAHC,SAACI,GAAD,MAFR,IAEgCC,OAAOD,EAAME,WAsBzCC,CAAWV,EAAEW,OAAOC,OACrChB,EAAYM,IAsCJU,MAAOjB,EACPkB,KAAK,eAKRxC,IAAaE,EACZ,wBAAQuC,QAAS,kBAtKZ,0CAsKkBC,IAAvB,4BACE1C,GAAYE,EACd,wBAAQuC,QAAS,kBAxKZ,0CAwKkBE,IAAvB,6BAEA,wBAAQF,QAAS,kBA1KZ,2CA0KkBG,CAAUtB,IAAjC,4BAEDtB,GACC,wBAAQyC,QAAS,kBA7KZ,0CA6KkBI,IAAvB,mCC5OKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8668352f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction useApi() {\n  const [data, setData] = useState<any>();\n  const getData = async () => {\n    try {\n      const response = await axios.get(\n        // \"https://cors-anywhere.herokuapp.com/https://covid-api.mmediagroup.fr/v1/cases\"\n        \"https://api.kanye.rest/\"\n      );\n      setData(response.data.quote);\n      console.log(\"Api response\", response.data.quote);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const refreshData = () => {\n    getData();\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return { data, refreshData };\n}\n\nexport default useApi;\n","import React, { useState, useEffect } from \"react\";\nimport useApi from \"./useApi\";\nimport * as Tone from \"tone\";\nimport Speech from \"speak-tts\";\n// import fakeData from \"./fakeApi.json\";\nimport {\n  getJyutping,\n  getTones,\n  getTonesFromOtherDictionary,\n} from \"./chinese/jyutpingify\";\n\nfunction toneNumberToNote(n: number) {\n  const notes = [\"C5\", \"B4\", \"G4\", \"D4\", \"F4\", \"E4\"];\n  const note = notes[n - 1];\n  console.log(note);\n  return note;\n}\n\nfunction charToNote(char: string) {\n  const notes = [\n    \"A4\",\n    \"Bb4\",\n    \"B4\",\n    \"C4\",\n    \"Db4\",\n    \"D4\",\n    \"Eb4\",\n    \"E4\",\n    \"F4\",\n    \"Gb4\",\n    \"G4\",\n    \"Ab4\",\n  ];\n  const note = notes[char.charCodeAt(0) % notes.length];\n  console.log(note);\n  return note;\n}\nfunction chineseSentenceToNotes(sentence: string) {\n  // const words = sentence.replace(\n  //   /[〇一-鿿㐀-䶿豈-﫿𠀀-𪛟𪜀-𫜿𫝀-𫠟丽-𯨟⼀-⿕⺀-⻳＂＃＄％＆＇（）＊＋，－／：；＜＝＞＠［＼］＾＿｀｛｜｝～｟｠｢｣､　、〃〈〉《》「」『』【】〔〕〖〗〘〙〚〛〜〝〞〟〰〾〿–—‘’‛“”„‟…‧﹏﹑﹔·]*[！？｡。][」﹂”』’》）］｝〕〗〙〛〉】]/gi,\n  //   \" \"\n  // );\n\n  // const tones = getTones(sentence);\n  const tones = \"14526123456\";\n  const output = tones\n    .split(\"\")\n    .map((char, i) => {\n      const time = `${Tone.Time(i / 2).toBarsBeatsSixteenths()}`;\n\n      if (char.match(/[0-9]/gi)) {\n        //is number\n        const arr = [time, toneNumberToNote(parseInt(char))];\n        return arr;\n      } else {\n        return null;\n      }\n    })\n    .filter((x) => !!x);\n  return output;\n}\n\nfunction sentenceToNotes(sentence: string) {\n  const words = sentence\n    .split(\"\")\n    .map((char, j) => {\n      const time = `${Tone.Time(j / 4).toBarsBeatsSixteenths()}`;\n      if (char === \" \") return null;\n      if (char === \".\") return [time, \"C0\"];\n      const arr = [time, charToNote(char)];\n      return arr;\n    })\n    .filter((x) => !!x);\n\n  return words;\n}\n\nfunction App() {\n  const [speech, setSpeech] = useState(new Speech());\n  const [speaking, setSpeaking] = useState(false);\n  const [speechPaused, setSpeechPaused] = useState(false);\n  const { data, refreshData } = useApi();\n  const [toneInitialized, setToneInitialized] = useState(false);\n  const synth = new Tone.Synth().toDestination();\n\n  async function speakText(text: string) {\n    try {\n      setSpeaking(true);\n      speech.speak({\n        text,\n        queue: false, // current speech will be interrupted,\n        listeners: {\n          onend: () => {\n            setSpeaking(false);\n            setSpeechPaused(false);\n          },\n        },\n      });\n    } catch (err) {\n      console.error(err);\n      setSpeaking(false);\n      setSpeechPaused(false);\n    }\n  }\n\n  async function pauseText() {\n    try {\n      await speech.pause();\n      setSpeechPaused(true);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async function resumeText() {\n    try {\n      await speech.resume();\n      setSpeechPaused(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async function cancelSpeak() {\n    try {\n      await speech.cancel();\n      setSpeaking(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async function initSpeak() {\n    try {\n      if (!speech) {\n        setSpeech(new Speech());\n      }\n      const data = await speech.init({\n        volume: 1,\n        lang: \"zh-HK\",\n        rate: 1,\n        pitch: 1,\n        splitSentences: true,\n      });\n      // The \"data\" object contains the list of available voices and the voice synthesis params\n      console.log(\"Speech is ready, voices are available\", data);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  useEffect(() => {\n    initSpeak();\n  }, []);\n\n  const play = async () => {\n    if (!toneInitialized) {\n      await Tone.start();\n      console.log(\"audio is ready\");\n      setToneInitialized(true);\n    }\n    stop();\n    const notesArray = sentenceToNotes(data);\n    console.log(JSON.stringify(notesArray));\n\n    new Tone.Part(function (time, value) {\n      synth.triggerAttackRelease(value, \"16n\", time);\n    }, notesArray).start(0);\n\n    Tone.Transport.bpm.value = 128;\n    Tone.Transport.start();\n  };\n\n  function censorText(text: string) {\n    const CHAR = \"*\";\n    const BANNED = [\"屌你老母\", \"fat\", \"stupid\", \"potato\", \"hobbit\"];\n    const replaceWithX = (match: string) => CHAR.repeat(match.length);\n    const filter = new RegExp(`\\\\b(${BANNED.join(\"|\")})\\\\b`, \"gi\");\n\n    return text.replace(filter, replaceWithX);\n  }\n\n  const stop = async () => {\n    Tone.Transport.stop();\n    Tone.Transport.cancel();\n  };\n\n  function handleRefreshData() {\n    refreshData();\n    stop();\n    play();\n  }\n  const [sentence, setSentence] = useState(\n    \"呢套方案目前得到香港教育、電腦中文資訊處理等多方面嘅支持。基於粵拼嘅拼音輸入法亦都發展得相當成熟。除咗香港，台灣同日本亦都有使用呢套方案嘅輸入系統出售，內地都有民間人士據此製作嘅輸入方案。方案得到政府、商界、學界等廣泛認同。\"\n  );\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    e.preventDefault();\n    const censored = censorText(e.target.value);\n    setSentence(censored);\n  };\n  const handlePlaySentence = () => {\n    playFromUserInput(sentence);\n  };\n  const playFromUserInput = async (str: string) => {\n    if (!toneInitialized) {\n      await Tone.start();\n      console.log(\"audio is ready\");\n      setToneInitialized(true);\n    }\n    stop();\n    const notesArray = chineseSentenceToNotes(sentence);\n    console.dir(notesArray);\n\n    new Tone.Part(function (time, value) {\n      synth.triggerAttackRelease(value, \"16n\", time);\n    }, notesArray).start(0);\n\n    Tone.Transport.bpm.value = 70;\n    Tone.Transport.start();\n  };\n  return (\n    <div>\n      {/* <div>\n        <button onClick={play}>Start Sound</button>\n        <button onClick={stop}>Stop Sound</button>\n      </div> */}\n      {/* <div>\n        <button onClick={handleRefreshData}>Get New Data</button>\n        {/* {JSON.stringify(data ?? fakeData)}\n      </div> */}\n      <div>\n        <form>\n          <textarea\n            rows={20}\n            cols={50}\n            onChange={handleInputChange}\n            value={sentence}\n            name=\"sentence\"\n          ></textarea>\n        </form>\n        {/* <button onClick={handlePlaySentence}>Play sentence</button> */}\n\n        {speaking && !speechPaused ? (\n          <button onClick={() => pauseText()}>Pause sentence</button>\n        ) : speaking && speechPaused ? (\n          <button onClick={() => resumeText()}>Resume sentence</button>\n        ) : (\n          <button onClick={() => speakText(sentence)}>Speak sentence</button>\n        )}\n        {speaking && (\n          <button onClick={() => cancelSpeak()}>Cancel sentence</button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}